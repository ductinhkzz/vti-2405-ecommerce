import { Accordion, CodeBlock, Markdown } from '../components';

const propsEx = `
function getImageUrl(person, size = 's') {
  return (
    'https://i.imgur.com/' +
    person.imageId +
    size +
    '.jpg'
  );
}

function Avatar({ person, size }) {
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

export default function Profile() {
  return (
    <div>
      <Avatar
        size={100}
        person={{ 
          name: 'Katsuko Saruhashi', 
          imageId: 'YfeOqp2'
        }}
      />
      <Avatar
        size={80}
        person={{
          name: 'Aklilu Lemma', 
          imageId: 'OKS67lh'
        }}
      />
      <Avatar
        size={50}
        person={{ 
          name: 'Lin Lanying',
          imageId: '1bX5QH6'
        }}
      />
    </div>
  );
}
`;

const stateEx = `
import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      You pressed me {count} times
    </button>
  );
}
`;

const twoWayBindingCode = `
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  function increment() {
    setCount(count + 1);
  }

  return (
    <div>
      <h1>{count}</h1>
      <button onClick={increment}>Increment</button>
    </div>
  );
}
`;

const uncontrolledCode = `
import React, { useRef } from "react";
 
function App() {
    const inputRef = useRef(null);
 
    function handleSubmit() {
        alert(\`Name: \${inputRef.current.value}\`);
    }
 
    return (
        <div className="App">
            <h1 className="geeks">GeeksForGeeks</h1>
            <h3>Uncontrolled Component</h3>
            <form onSubmit={handleSubmit}>
                <label>Name :</label>
                <input
                    type="text"
                    name="name"
                    ref={inputRef}
                />
                <button type="submit">Submit</button>
            </form>
        </div>
    );
}
`;

const eventEx = `
export default function Button() {
  function handleClick() {
    alert('You clicked me!');
  }

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
}
`;

const renderListCode = `
const people = [
  {
    id: 0, // Used in JSX as a key
    name: 'Creola Katherine Johnson',
    profession: 'mathematician',
    accomplishment: 'spaceflight calculations',
    imageId: 'MK3eW3A',
  },
  {
    id: 1, // Used in JSX as a key
    name: 'Mario Jos√© Molina-Pasquel Henr√≠quez',
    profession: 'chemist',
    accomplishment: 'discovery of Arctic ozone hole',
    imageId: 'mynHUSa',
  },
  {
    id: 2, // Used in JSX as a key
    name: 'Mohammad Abdus Salam',
    profession: 'physicist',
    accomplishment: 'electromagnetism theory',
    imageId: 'bE7W1ji',
  },
  {
    id: 3, // Used in JSX as a key
    name: 'Percy Lavon Julian',
    profession: 'chemist',
    accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',
    imageId: 'IOjWm71',
  },
  {
    id: 4, // Used in JSX as a key
    name: 'Subrahmanyan Chandrasekhar',
    profession: 'astrophysicist',
    accomplishment: 'white dwarf star mass calculations',
    imageId: 'lrWQx8l',
  },
];

function getImageUrl(person) {
  return (
    'https://i.imgur.com/' +
    person.imageId +
    's.jpg'
  );
}

export default function List() {
  const listItems = people.map(person =>
    <li key={person.id}>
      <img
        src={getImageUrl(person)}
        alt={person.name}
      />
      <p>
        <b>{person.name}</b>
          {' ' + person.profession + ' '}
          known for {person.accomplishment}
      </p>
    </li>
  );
  return <ul>{listItems}</ul>;
}
`;

const ReactPage = () => {
  return (
    <div className='mx-auto w-full divide-y divide-white/5 rounded-xl bg-white/5'>
      <Accordion title='What is React?'>
        <ul className='list-disc ps-8 font-normal'>
          <li>A JavaScript library for building reusable UI components</li>
          <li>Created by Facebook in 2011, released 2013</li>
          <li>Auto compile code & Refresh Screen (Dev Mode)</li>
          <li>ReacteJS (for Web) & React Native (for mobile)</li>
          <li>Application : WhatsApp, Instagram, Facebook</li>
          <li>Built around the component</li>
        </ul>
      </Accordion>
      <Accordion title='What is JSX?'>
        <ul className='list-disc ps-8 font-normal'>
          <li>
            JSX l√† ph·∫ßn m·ªü r·ªông c√∫ ph√°p cho JavaScript cho ph√©p c√°c nh√† ph√°t tri·ªÉn vi·∫øt c√°c th√†nh ph·∫ßn gi·ªëng HTML trong
            m√£ JavaScript c·ªßa h·ªç.
          </li>
          <li>N√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong React ƒë·ªÉ m√¥ t·∫£ c·∫•u tr√∫c v√† n·ªôi dung c·ªßa m·ªôt th√†nh ph·∫ßn.</li>
          <li>
            JSX ƒë∆∞·ª£c bi√™n d·ªãch th√†nh JavaScript thu·∫ßn t√∫y tr∆∞·ªõc khi ƒë∆∞·ª£c th·ª±c thi, do ƒë√≥ n√≥ t∆∞∆°ng th√≠ch v·ªõi t·∫•t c·∫£ c√°c
            tr√¨nh duy·ªát web.
          </li>
        </ul>
      </Accordion>
      <p>C√≥ 2 lo·∫°i components</p>
      <ul className='list-disc ps-8 font-normal'>
        <li>Class Component</li>
        <li>Functional Component (recommend)</li>
      </ul>
      <p className='mt-4'>ƒê·∫∑c ƒëi·ªÉm component</p>
      <ul className='list-disc ps-8 font-normal'>
        <li>M·ªçi th·ª© trong react th√¨ ƒë∆∞·ª£c vi·∫øt nh∆∞ m·ªôt component</li>
        <li>T√≠nh t√°i s·ª≠ d·ª•ng component</li>
        <li>Split logic</li>
      </ul>
      <Accordion title='Component Stateless vs statefull'>
        <p>Statefull component</p>
        <ul className='list-disc ps-8 font-normal'>
          <li>Qu·∫£n l√Ω data, logic v√† g·ªçi API</li>
          <li>Kh√¥ng quan t√¢m UI render nh∆∞ th·∫ø n√†o, ch·ªâ quan t√¢m nh·ªØng g√¨ n√≥ render</li>
          <li>Bao g·ªìm v√† qu·∫£n l√Ω nh·ªØng component con</li>
        </ul>
        <p className='mt-4'>Stateless component</p>
        <ul className='list-disc ps-8 font-normal'>
          <li>Hi·ªán th·ªã UI</li>
          <li>C√≥ th·ªÉ gi·∫£i quy·∫øt nh·ªØng logic b√™n trong n√≥</li>
          <li>T√°i s·ª≠ d·ª•ng</li>
        </ul>
      </Accordion>
      <Accordion title='Styling'>
        <ul className='list-disc ps-8 font-normal'>
          <li>Inline styling (not recommend)</li>
          <li>Css in Css (module css, css file, scss, ...)</li>
          <li>Css in JS</li>
        </ul>
        <Accordion title='Inline styling'>
          <ul className='list-disc ps-8 font-normal'>
            <li>
              Pros:
              <ol>
                <li>Easy, fast writing</li>
              </ol>
            </li>
            <li>
              Cons:
              <ol>
                <li>Difficult management</li>
                <li>Cannot reuse</li>
              </ol>
            </li>
          </ul>
        </Accordion>
        <Accordion title='Css in Css'>
          <ul className='list-disc ps-8 font-normal'>
            <li>
              2 c√°ch:
              <ol className='ps-4'>
                <li>CSS Stylesheet</li>
                <li>Css module</li>
              </ol>
            </li>
            <li>
              Css Stylesheet
              <ol className='ps-4'>
                <li>
                  Pros:
                  <ol className='ps-4'>
                    <li>Separate css from the component</li>
                    <li>Reusable</li>
                    <li>Easy writing</li>
                    <li>Can be used all the features of Traditional CSS (media query, pseudo-selectors, ...)</li>
                  </ol>
                </li>
                <li>
                  Cons:
                  <ol className='ps-4'>
                    <li>easy to conflict naming ü°∫ overriding CSS code</li>
                    <li>cannot use state & props</li>
                  </ol>
                </li>
              </ol>
            </li>
            <li>
              Css Module
              <ol className='ps-4'>
                <li>
                  Pros:
                  <ol className='ps-4'>
                    <li>Similar to CSS Stylesheet</li>
                    <li>Package each component has 1 CSS Module</li>
                    <li>Can be used all the features of Traditional CSS (media query, pseudo-selectors, ...)</li>
                    <li>Auto generate a unique class name ü°™ never fear of conflict class name</li>
                  </ol>
                </li>
                <li>
                  Cons:
                  <ol className='ps-4'>
                    <li>Cannot use state & props</li>
                  </ol>
                </li>
              </ol>
            </li>
            <li>
              CSS in JS (Styled Component)
              <ol className='ps-4'>
                <li>
                  Pros:
                  <ol className='ps-4'>
                    <li>High applicability and reusability</li>
                    <li>Package CSS for each component</li>
                    <li>Can be used all the features of Traditional CSS (media query, pseudo-selectors, ...)</li>
                    <li>Auto generate a unique class name ü°™ never fear of conflict class name</li>
                    <li>Auto-prefixing for different browsers</li>
                    <li>Using props and state</li>
                  </ol>
                </li>
                <li>
                  Cons:
                  <ol className='ps-4'>
                    <li>CSS is in .js file (more codes)</li>
                  </ol>
                </li>
              </ol>
            </li>
          </ul>
        </Accordion>
      </Accordion>
      <Accordion title='Fragment'>
        <ul className='list-disc ps-8 font-normal'>
          <li>
            <Markdown>{`Qu·∫•n c√°c ph·∫ßn t·ª≠ trong <Fragment> ƒë·ªÉ nh√≥m ch√∫ng l·∫°i v·ªõi nhau trong nh·ªØng tr∆∞·ªùng h·ª£p b·∫°n c·∫ßn m·ªôt ph·∫ßn t·ª≠ duy nh·∫•t. Vi·ªác nh√≥m c√°c ph·∫ßn t·ª≠ trong Fragment kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn DOM k·∫øt qu·∫£; n√≥ gi·ªëng nh∆∞ khi c√°c ph·∫ßn t·ª≠ kh√¥ng ƒë∆∞·ª£c nh√≥m. Th·∫ª JSX tr·ªëng <></> l√† vi·∫øt t·∫Øt c·ªßa <Fragment></Fragment> trong h·∫ßu h·∫øt c√°c tr∆∞·ªùng h·ª£p.`}</Markdown>
          </li>
          <li>
            <Markdown>{`If you want to pass key to a Fragment, you can‚Äôt use the <>...</> syntax. You have to explicitly import Fragment from 'react' and render <Fragment key={yourKey}>...</Fragment>.`}</Markdown>
          </li>
        </ul>
      </Accordion>
      <Accordion title='Props'>
        <ul className='list-disc ps-8 font-normal'>
          <li>Stand for Properties</li>
          <li>Similar to HTML‚Äôs attribute, parameter of function</li>
          <li>Read-only, immutable</li>
          <li>Send data between parent component and child component</li>
          <li>Type: variable, expression JavaScript, props.children</li>
        </ul>
        <CodeBlock language='jsx' code={propsEx} />
      </Accordion>
      <Accordion title='State'>
        <ul className='list-disc ps-8 font-normal'>
          <li>Save data, information in component & auto re-render when changing data</li>
          <li>Only using in Class Component</li>
          <li>Scope: only a Component</li>
        </ul>
        <CodeBlock language='jsx' code={stateEx} />
      </Accordion>
      <Accordion title='State vs Props'>
        <table className='table-auto border'>
          <thead className='border'>
            <tr className='divide-x'>
              <th className='text-center p-2'>No.</th>
              <th className='text-center p-2'>Props</th>
              <th className='text-center p-2'>State</th>
            </tr>
          </thead>
          <tbody className='divide-y'>
            <tr className='divide-x'>
              <td className='text-center p-2'>1</td>
              <td className='text-center p-2'>Props are read-only</td>
              <td className='text-center p-2'>State changes can be asynchronous</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>2</td>
              <td className='text-center p-2'>Immutable</td>
              <td className='text-center p-2'>Mutable</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>3</td>
              <td className='text-center p-2'>
                Props allow you to pass data from one component to other components as an argument
              </td>
              <td className='text-center p-2'>State holds infomation about the components</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>4</td>
              <td className='text-center p-2'>Props can be accessed by the child components</td>
              <td className='text-center p-2'>State can not be accessed by the child components</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>5</td>
              <td className='text-center p-2'>Props are used to communicate between components</td>
              <td className='text-center p-2'>State can be used for rendering dynamic changes with the component</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>6</td>
              <td className='text-center p-2'>Stateless component can have props</td>
              <td className='text-center p-2'>Stateless component cannot have state</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>7</td>
              <td className='text-center p-2'>Props make components reusable</td>
              <td className='text-center p-2'>State cannot make components reusable</td>
            </tr>
            <tr className='divide-x'>
              <td className='text-center p-2'>8</td>
              <td className='text-center p-2'>Props are external and controlled by whatever renders the components</td>
              <td className='text-center p-2'>State are internal and controlled by React component itself</td>
            </tr>
          </tbody>
        </table>
      </Accordion>
      <Accordion title='Form'>
        <ul className='list-disc ps-8 font-normal space-y-4'>
          <li>
            Single source of truth
            <ol className='ps-8'>
              <li>There is only one object responsible for holding and updating the value</li>
            </ol>
          </li>
          <li>
            Controlled Component
            <ol className='ps-8'>
              <li>The data in the form is managed by React in the form of state or store ü°™ "single source of truth‚Äú</li>
              <li>Most forms are Controlled Component</li>
              <li>Re-render a lot</li>
              <li>
                2 Way binding
                <CodeBlock language='jsx' code={twoWayBindingCode} />
              </li>
            </ol>
          </li>
          <li>
            Uncontrolled Component
            <ol className='ps-8'>
              <li>
                The data in the form is directly managed by DOM (similar to traditional HTML) ü°™ "single source of truth‚Äú
              </li>
              <li>Using for Integrating Non-React code</li>
              <li>Not much re-rendering</li>
              <li>
                <CodeBlock language='jsx' code={uncontrolledCode} />
              </li>
            </ol>
          </li>
          <li>
            Controlled Component Vs Uncontrolled Component{' '}
            <table className='table-auto border mt-2'>
              <thead className='border'>
                <tr className='divide-x'>
                  <th className='text-center p-2'>No.</th>
                  <th className='text-center p-2'>Controlled Component</th>
                  <th className='text-center p-2'>Uncontrolled Component</th>
                </tr>
              </thead>
              <tbody className='divide-y'>
                <tr className='divide-x'>
                  <td className='text-center p-2'>1</td>
                  <td className='text-center p-2'>It maintains its state</td>
                  <td className='text-center p-2'>It does not maintain its state</td>
                </tr>
                <tr className='divide-x'>
                  <td className='text-center p-2'>2</td>
                  <td className='text-center p-2'>data controlled by the component</td>
                  <td className='text-center p-2'>data controlled by DOM itself</td>
                </tr>
                <tr className='divide-x'>
                  <td className='text-center p-2'>3</td>
                  <td className='text-center p-2'>It accepts its current value as a props</td>
                  <td className='text-center p-2'>It uses a ref for their current values</td>
                </tr>
                <tr className='divide-x'>
                  <td className='text-center p-2'>4</td>
                  <td className='text-center p-2'>Props can be accessed by the child components</td>
                  <td className='text-center p-2'>State can not be accessed by the child components</td>
                </tr>
                <tr className='divide-x'>
                  <td className='text-center p-2'>5</td>
                  <td className='text-center p-2'>It allows validation control</td>
                  <td className='text-center p-2'>It does not allow validation control</td>
                </tr>
                <tr className='divide-x'>
                  <td className='text-center p-2'>6</td>
                  <td className='text-center p-2'>It has better control over the form elements and data</td>
                  <td className='text-center p-2'>It has limited control over the form elements and data</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
      </Accordion>
      <Accordion title='Event'>
        <div>
          React cho ph√©p b·∫°n th√™m tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán v√†o JSX c·ªßa m√¨nh. Tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán l√† c√°c h√†m c·ªßa ri√™ng b·∫°n s·∫Ω
          ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·ªÉ ph·∫£n h·ªìi c√°c t∆∞∆°ng t√°c nh∆∞ clicking, hovering, focusing form inputs, v.v.
          <CodeBlock code={eventEx} language='jsx' />
        </div>
      </Accordion>
      <Accordion title='Render List'>
        <p>
          B·∫°n th∆∞·ªùng mu·ªën hi·ªÉn th·ªã nhi·ªÅu th√†nh ph·∫ßn t∆∞∆°ng t·ª± t·ª´ m·ªôt t·∫≠p h·ª£p d·ªØ li·ªáu. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c
          m·∫£ng JavaScript ƒë·ªÉ thao t√°c m·ªôt m·∫£ng d·ªØ li·ªáu. Tr√™n trang n√†y, b·∫°n s·∫Ω s·ª≠ d·ª•ng filter() v√† map() v·ªõi React ƒë·ªÉ
          l·ªçc v√† chuy·ªÉn ƒë·ªïi m·∫£ng d·ªØ li·ªáu c·ªßa b·∫°n th√†nh m·ªôt m·∫£ng c√°c th√†nh ph·∫ßn.
        </p>
        <CodeBlock language='jsx' code={renderListCode}></CodeBlock>
      </Accordion>
    </div>
  );
};

export default ReactPage;
